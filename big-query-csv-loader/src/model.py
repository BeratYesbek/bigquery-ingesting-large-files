# generated by datamodel-codegen:
#   filename:  users.json
#   timestamp: 2025-03-16T10:29:59+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field, model_validator


class Users(BaseModel):
    username: str = Field(..., description='The unique username of the user.')
    firstname: str = Field(..., description="The user's first name.")
    lastname: str = Field(..., description="The user's last name.")
    language: Optional[str] = Field(
        None, description="The preferred language of the user (e.g., 'en', 'es', 'fr')."
    )
    address_id: Optional[int] = Field(
        None,
        description="A foreign key referencing the unique identifier of the user's address in an external addresses table.",
    )
    contact_id: Optional[int] = Field(
        None,
        description="A foreign key referencing the unique identifier of the user's contact details in an external contacts table.",
    )

    @model_validator(mode="before")
    def handle_blank_strings(cls, data: dict) -> dict:
        """Convert empty strings to None for all fields"""
        if isinstance(data, dict):
            for key, value in data.items():
                if value == "":
                    data[key] = None
        return data